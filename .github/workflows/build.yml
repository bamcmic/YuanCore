name: Manual Kernel Build (auto-detect + bin)

on:
  workflow_dispatch:
    inputs:
      source_folder:
        description: "Source folder name (e.g., 0.001bate)"
        required: true
        default: "0.001bate"

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build kernel -> .bin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends gcc-multilib binutils nasm

      - name: Prepare paths
        id: prep
        run: |
          SRC="source code/Commented code/C source code/${{ github.event.inputs.source_folder }}"
          OUT="Assembly_section/x86_64/${{ github.event.inputs.source_folder }}"
          mkdir -p "$OUT"
          echo "src_dir=$SRC" >> $GITHUB_OUTPUT
          echo "out_dir=$OUT" >> $GITHUB_OUTPUT

      - name: Detect, compile, link and create .bin
        id: build
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.prep.outputs.src_dir }}"
          OUT="${{ steps.prep.outputs.out_dir }}"

          if [ ! -d "$SRC" ]; then
            echo "ERROR: source directory not found: $SRC"
            exit 1
          fi

          cd "$SRC"

          if [ ! -f "boot.s" ]; then
            echo "ERROR: boot.s not found in $SRC"
            exit 1
          fi

          AS_STYLE="gcc"
          BITNESS="64"
          LD_MODE="elf_x86_64"

          # Detect assembly syntax and bitness
          if grep -q -E '^\s*BITS\b' boot.s; then
            AS_STYLE="nasm"
            if grep -q -E '^\s*BITS\s+32\b' boot.s; then
              BITNESS="32"; LD_MODE="elf_i386"
            fi
          else
            if grep -q -E '(%esp|%eax|movl|int \$0x80|pushl)' boot.s; then
              AS_STYLE="gcc"; BITNESS="32"; LD_MODE="elf_i386"
            elif grep -q -E '(%rsp|%rax|movq|syscall|pushq)' boot.s; then
              AS_STYLE="gcc"; BITNESS="64"; LD_MODE="elf_x86_64"
            fi
          fi

          echo "Assembly: $AS_STYLE, Bitness: $BITNESS"

          rm -f boot.o kernel.o kernel.elf kernel.bin

          # Assemble boot.s
          if [ "$AS_STYLE" = "nasm" ]; then
            [ "$BITNESS" = "32" ] && nasm -f elf32 boot.s -o boot.o || nasm -f elf64 boot.s -o boot.o
          else
            [ "$BITNESS" = "32" ] && gcc -c -m32 boot.s -o boot.o || gcc -c -m64 boot.s -o boot.o
          fi

          # Compile kernel.c if exists
          if [ -f kernel.c ]; then
            [ "$BITNESS" = "32" ] && gcc -ffreestanding -c -m32 kernel.c -o kernel.o || gcc -ffreestanding -c -m64 kernel.c -o kernel.o
            OBJS="boot.o kernel.o"
          else
            OBJS="boot.o"
          fi

          # Link
          [ "$LD_MODE" = "elf_i386" ] && ld -m elf_i386 -T linker.ld -o kernel.elf $OBJS || ld -m elf_x86_64 -T linker.ld -o kernel.elf $OBJS

          # Create binary
          objcopy -O binary kernel.elf kernel.bin

          mkdir -p "$OUT"
          cp kernel.bin "$OUT/kernel.bin"
          cp kernel.elf "$OUT/kernel.elf" || true

          echo "Built kernel.bin -> $OUT"

      - name: Upload artifact (bin)
        uses: actions/upload-artifact@v4
        with:
          name: kernel-bin-artifact
          path: ${{ steps.prep.outputs.out_dir }}/kernel.bin
